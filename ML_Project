{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":38},"id":"306FbWO8-8ua"},"outputs":[{"data":{"text/html":["\n","     \u003cinput type=\"file\" id=\"files-8fe05bff-4397-4121-85d5-2a790848a38e\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" /\u003e\n","     \u003coutput id=\"result-8fe05bff-4397-4121-85d5-2a790848a38e\"\u003e\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      \u003c/output\u003e\n","      \u003cscript\u003e// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) =\u003e {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable\u003c!Object\u003e} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) =\u003e {\n","    inputElement.addEventListener('change', (e) =\u003e {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) =\u003e {\n","    cancel.onclick = () =\u003e {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) =\u003e {\n","      const reader = new FileReader();\n","      reader.onload = (e) =\u003e {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position \u003c fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","\u003c/script\u003e "],"text/plain":["\u003cIPython.core.display.HTML object\u003e"]},"metadata":{},"output_type":"display_data"},{"ename":"TypeError","evalue":"'NoneType' object is not subscriptable","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-1-624448874.py\u001b[0m in \u001b[0;36m\u003ccell line: 0\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 2\u001b[0;31m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Upload kaggle.json\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'mkdir -p ~/.kaggle'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'cp kaggle.json ~/.kaggle/'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'chmod 600 ~/.kaggle/kaggle.json'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mupload\u001b[0;34m(target_dir)\u001b[0m\n\u001b[1;32m     70\u001b[0m   \"\"\"\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 72\u001b[0;31m   \u001b[0muploaded_files\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_upload_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m   \u001b[0;31m# Mapping from original filename to filename as saved locally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m   \u001b[0mlocal_filenames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36m_upload_files\u001b[0;34m(multiple)\u001b[0m\n\u001b[1;32m    169\u001b[0m   \u001b[0mfiles\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_collections\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdefaultdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbytes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 171\u001b[0;31m   \u001b[0;32mwhile\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'action'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'complete'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    172\u001b[0m     result = _output.eval_js(\n\u001b[1;32m    173\u001b[0m         'google.colab._files._uploadFilesContinue(\"{output_id}\")'.format(\n","\u001b[0;31mTypeError\u001b[0m: 'NoneType' object is not subscriptable"]}],"source":["from google.colab import files\n","files.upload()  # Upload kaggle.json\n","!mkdir -p ~/.kaggle\n","!cp kaggle.json ~/.kaggle/\n","!chmod 600 ~/.kaggle/kaggle.json\n","!pip install kaggle"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3951,"status":"ok","timestamp":1753386674941,"user":{"displayName":"Waqar Farooq","userId":"10285691858924920596"},"user_tz":-300},"id":"_WzMuEfh_UjK","outputId":"b588692e-f12f-4227-d157-9e9b5e3fc761"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (2.0.2)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: contourpy\u003e=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.2)\n","Requirement already satisfied: cycler\u003e=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools\u003e=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.59.0)\n","Requirement already satisfied: kiwisolver\u003e=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: packaging\u003e=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (25.0)\n","Requirement already satisfied: pillow\u003e=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.3.0)\n","Requirement already satisfied: pyparsing\u003e=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.3)\n","Requirement already satisfied: python-dateutil\u003e=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.9.0.post0)\n","Requirement already satisfied: six\u003e=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil\u003e=2.7-\u003ematplotlib) (1.17.0)\n"]}],"source":["!pip install numpy matplotlib"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1948},"executionInfo":{"elapsed":1335529,"status":"ok","timestamp":1753389675863,"user":{"displayName":"Waqar Farooq","userId":"10285691858924920596"},"user_tz":-300},"id":"urX2gtHx_Xab","outputId":"de9cb72d-adb8-4f66-8fc6-d7a596f38220"},"outputs":[{"name":"stdout","output_type":"stream","text":["Loaded 5171 emails from spam_ham_dataset.csv\n","\n","Cross-Validation Results (mean ± std):\n","Logistic Regression:\n","  Accuracy: 0.8486 ± 0.0080\n","  Precision: 0.9130 ± 0.0340\n","  Recall: 0.5286 ± 0.0112\n","  F1-Score: 0.6691 ± 0.0087\n","Decision Tree:\n","  Accuracy: 0.8341 ± 0.0074\n","  Precision: 0.6382 ± 0.0234\n","  Recall: 0.9847 ± 0.0081\n","  F1-Score: 0.7742 ± 0.0178\n","Random Forest:\n","  Accuracy: 0.8557 ± 0.0166\n","  Precision: 0.7099 ± 0.1049\n","  Recall: 0.9211 ± 0.1305\n","  F1-Score: 0.7852 ± 0.0229\n","SVM:\n","  Accuracy: 0.7169 ± 0.0148\n","  Precision: 0.5985 ± 0.0567\n","  Recall: 0.0742 ± 0.0115\n","  F1-Score: 0.1316 ± 0.0175\n","\n","Confusion Matrix: Logistic Regression\n","          Predicted\n","          Ham  Spam\n","True Ham  708  12  \n","True Spam 151  163 \n","\n","Confusion Matrix: Decision Tree\n","          Predicted\n","          Ham  Spam\n","True Ham  559  161 \n","True Spam 9    305 \n","\n","Confusion Matrix: Random Forest\n","          Predicted\n","          Ham  Spam\n","True Ham  561  159 \n","True Spam 7    307 \n","\n","Confusion Matrix: SVM\n","          Predicted\n","          Ham  Spam\n","True Ham  708  12  \n","True Spam 290  24  \n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 800x600 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 1000x800 with 4 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["import numpy as np\n","import csv\n","import re\n","from collections import Counter\n","import random\n","import matplotlib.pyplot as plt\n","\n","# Data Preprocessing\n","def load_data(filename):\n","    texts = []\n","    labels = []\n","    try:\n","        with open(filename, 'r', encoding='utf-8') as file:\n","            reader = csv.DictReader(file)\n","            for row in reader:\n","                texts.append(row['text'])\n","                labels.append(1 if row['label'].lower() == 'spam' else 0)\n","        print(f\"Loaded {len(texts)} emails from {filename}\")\n","        return texts, np.array(labels)\n","    except FileNotFoundError:\n","        print(f\"Error: File '{filename}' not found. Ensure the dataset is downloaded and unzipped.\")\n","        return [], []\n","    except KeyError as e:\n","        print(f\"Error: Missing column {e}. Expected 'text' and 'label' columns.\")\n","        return [], []\n","\n","def preprocess_text(text):\n","    text = text.lower()\n","    text = re.sub(r'[^\\w\\s]', ' ', text)\n","    return text.split()\n","\n","def build_vocabulary(texts, max_features=1000):\n","    word_counts = Counter()\n","    for text in texts:\n","        words = preprocess_text(text)\n","        word_counts.update(words)\n","    vocab = [word for word, _ in word_counts.most_common(max_features)]\n","    word_to_idx = {word: idx for idx, word in enumerate(vocab)}\n","    return word_to_idx\n","\n","def text_to_features(texts, word_to_idx):\n","    features = np.zeros((len(texts), len(word_to_idx)))\n","    for i, text in enumerate(texts):\n","        words = preprocess_text(text)\n","        for word in words:\n","            if word in word_to_idx:\n","                features[i, word_to_idx[word]] += 1\n","    return features\n","\n","def train_test_split(X, y, test_size=0.2, random_seed=42):\n","    np.random.seed(random_seed)\n","    indices = np.arange(len(y))\n","    np.random.shuffle(indices)\n","    test_size = int(test_size * len(y))\n","    train_idx, test_idx = indices[:-test_size], indices[-test_size:]\n","    X_train, X_test = X[train_idx], X[test_idx]\n","    y_train, y_test = y[train_idx], y[test_idx]\n","    return X_train, X_test, y_train, y_test\n","\n","# K-Fold Cross-Validation\n","def k_fold_split(X, y, k=5, random_seed=42):\n","    np.random.seed(random_seed)\n","    indices = np.arange(len(y))\n","    np.random.shuffle(indices)\n","    fold_size = len(y) // k\n","    folds = []\n","    for i in range(k):\n","        test_start = i * fold_size\n","        test_end = (i + 1) * fold_size if i \u003c k - 1 else len(y)\n","        test_idx = indices[test_start:test_end]\n","        train_idx = np.concatenate((indices[:test_start], indices[test_end:]))\n","        folds.append((train_idx, test_idx))\n","    return folds\n","\n","# Evaluation Metrics\n","def compute_metrics(y_true, y_pred):\n","    tp = np.sum((y_true == 1) \u0026 (y_pred == 1))\n","    tn = np.sum((y_true == 0) \u0026 (y_pred == 0))\n","    fp = np.sum((y_true == 0) \u0026 (y_pred == 1))\n","    fn = np.sum((y_true == 1) \u0026 (y_pred == 0))\n","\n","    accuracy = (tp + tn) / (tp + tn + fp + fn) if (tp + tn + fp + fn) \u003e 0 else 0\n","    precision = tp / (tp + fp) if (tp + fp) \u003e 0 else 0\n","    recall = tp / (tp + fn) if (tp + fn) \u003e 0 else 0\n","    f1 = 2 * (precision * recall) / (precision + recall) if (precision + recall) \u003e 0 else 0\n","\n","    return accuracy, precision, recall, f1, np.array([[tn, fp], [fn, tp]])\n","\n","# Logistic Regression\n","def sigmoid(z):\n","    return 1 / (1 + np.exp(-np.clip(z, -500, 500)))\n","\n","def logistic_regression(X, y, lr=0.01, epochs=100):\n","    n_samples, n_features = X.shape\n","    weights = np.zeros(n_features)\n","    bias = 0\n","    for _ in range(epochs):\n","        linear_model = np.dot(X, weights) + bias\n","        y_pred = sigmoid(linear_model)\n","        dw = (1/n_samples) * np.dot(X.T, (y_pred - y))\n","        db = (1/n_samples) * np.sum(y_pred - y)\n","        weights -= lr * dw\n","        bias -= lr * db\n","    return weights, bias\n","\n","def predict_logistic(X, weights, bias):\n","    linear_model = np.dot(X, weights) + bias\n","    return (sigmoid(linear_model) \u003e= 0.5).astype(int)\n","\n","# Decision Tree\n","class Node:\n","    def __init__(self, feature=None, threshold=None, left=None, right=None, value=None):\n","        self.feature = feature\n","        self.threshold = threshold\n","        self.left = left\n","        self.right = right\n","        self.value = value\n","\n","def gini_impurity(y):\n","    _, counts = np.unique(y, return_counts=True)\n","    probabilities = counts / len(y)\n","    return 1 - np.sum(probabilities**2)\n","\n","def best_split(X, y):\n","    best_gain = -1\n","    best_feature = None\n","    best_threshold = None\n","    for feature in range(X.shape[1]):\n","        thresholds = np.unique(X[:, feature])\n","        for threshold in thresholds:\n","            left_idx = X[:, feature] \u003c= threshold\n","            right_idx = X[:, feature] \u003e threshold\n","            if sum(left_idx) == 0 or sum(right_idx) == 0:\n","                continue\n","            left_y, right_y = y[left_idx], y[right_idx]\n","            gain = gini_impurity(y) - (len(left_y)/len(y) * gini_impurity(left_y) +\n","                                     len(right_y)/len(y) * gini_impurity(right_y))\n","            if gain \u003e best_gain:\n","                best_gain = gain\n","                best_feature = feature\n","                best_threshold = threshold\n","    return best_feature, best_threshold\n","\n","def build_tree(X, y, max_depth=5, min_samples=10):\n","    if len(y) \u003c min_samples or max_depth == 0:\n","        return Node(value=np.bincount(y).argmax())\n","    feature, threshold = best_split(X, y)\n","    if feature is None:\n","        return Node(value=np.bincount(y).argmax())\n","    left_idx = X[:, feature] \u003c= threshold\n","    right_idx = X[:, feature] \u003e threshold\n","    left = build_tree(X[left_idx], y[left_idx], max_depth-1, min_samples)\n","    right = build_tree(X[right_idx], y[right_idx], max_depth-1, min_samples)\n","    return Node(feature, threshold, left, right)\n","\n","def predict_tree(tree, X):\n","    predictions = []\n","    for x in X:\n","        node = tree\n","        while node.value is None:\n","            if x[node.feature] \u003c= node.threshold:\n","                node = node.left\n","            else:\n","                node = node.right\n","        predictions.append(node.value)\n","    return np.array(predictions)\n","\n","# Random Forest\n","def bootstrap_sample(X, y, size):\n","    indices = np.random.choice(len(y), size=size, replace=True)\n","    return X[indices], y[indices]\n","\n","def random_forest(X, y, n_trees=5, max_depth=5, min_samples=10):\n","    trees = []\n","    for _ in range(n_trees):\n","        X_sample, y_sample = bootstrap_sample(X, y, len(y))\n","        tree = build_tree(X_sample, y_sample, max_depth, min_samples)\n","        trees.append(tree)\n","    return trees\n","\n","def predict_forest(trees, X):\n","    predictions = np.array([predict_tree(tree, X) for tree in trees])\n","    return np.apply_along_axis(lambda x: np.bincount(x).argmax(), axis=0, arr=predictions)\n","\n","# SVM\n","def svm_train(X, y, lr=0.01, lambda_param=0.01, epochs=100):\n","    y = np.where(y == 0, -1, 1)\n","    n_samples, n_features = X.shape\n","    weights = np.zeros(n_features)\n","    bias = 0\n","    for _ in range(epochs):\n","        for i in range(n_samples):\n","            if y[i] * (np.dot(X[i], weights) + bias) \u003e= 1:\n","                weights -= lr * (2 * lambda_param * weights)\n","            else:\n","                weights -= lr * (2 * lambda_param * weights - np.dot(X[i], y[i]))\n","                bias -= lr * y[i]\n","    return weights, bias\n","\n","def predict_svm(X, weights, bias):\n","    return np.where(np.dot(X, weights) + bias \u003e= 0, 1, 0)\n","\n","# Visualization\n","def plot_accuracy_chart(accuracies, title=\"Model Accuracy Comparison\"):\n","    models = [\"Logistic Regression\", \"Decision Tree\", \"Random Forest\", \"SVM\"]\n","    plt.figure(figsize=(8, 6))\n","    plt.bar(models, accuracies, color=[\"#4e79a7\", \"#f28e2c\", \"#e15759\", \"#76b7b2\"])\n","    plt.title(title)\n","    plt.xlabel(\"Model\")\n","    plt.ylabel(\"Accuracy\")\n","    plt.ylim(0, 1)\n","    plt.show()\n","    # Chart.js config (for reference, not rendered in Colab)\n","    \"\"\"\n","    ```chartjs\n","    {\n","      \"type\": \"bar\",\n","      \"data\": {\n","        \"labels\": [\"Logistic Regression\", \"Decision Tree\", \"Random Forest\", \"SVM\"],\n","        \"datasets\": [{\n","          \"label\": \"Accuracy\",\n","          \"data\": accuracies,\n","          \"backgroundColor\": [\"#4e79a7\", \"#f28e2c\", \"#e15759\", \"#76b7b2\"],\n","          \"borderColor\": [\"#4e79a7\", \"#f28e2c\", \"#e15759\", \"#76b7b2\"],\n","          \"borderWidth\": 1\n","        }]\n","      },\n","      \"options\": {\n","        \"scales\": {\n","          \"y\": {\n","            \"beginAtZero\": true,\n","            \"max\": 1,\n","            \"title\": {\n","              \"display\": true,\n","              \"text\": \"Accuracy\"\n","            }\n","          },\n","          \"x\": {\n","            \"title\": {\n","              \"display\": true,\n","              \"text\": \"Model\"\n","            }\n","          }\n","        },\n","        \"plugins\": {\n","          \"title\": {\n","            \"display\": true,\n","            \"text\": title\n","          }\n","        }\n","      }\n","    }\n","    ```\n","    \"\"\"\n","\n","def print_confusion_matrix(cm, model_name):\n","    print(f\"\\nConfusion Matrix: {model_name}\")\n","    print(\"          Predicted\")\n","    print(\"          Ham  Spam\")\n","    print(f\"True Ham  {cm[0,0]:\u003c4} {cm[0,1]:\u003c4}\")\n","    print(f\"True Spam {cm[1,0]:\u003c4} {cm[1,1]:\u003c4}\")\n","\n","def plot_confusion_matrix(cm, model_name, ax):\n","    ax.imshow(cm, interpolation='nearest', cmap='Blues')\n","    ax.set_title(f'Confusion Matrix: {model_name}')\n","    ax.set_xlabel('Predicted')\n","    ax.set_ylabel('True')\n","    for i in range(2):\n","        for j in range(2):\n","            ax.text(j, i, cm[i, j], ha='center', va='center')\n","    ax.set_xticks([0, 1])\n","    ax.set_yticks([0, 1])\n","    ax.set_xticklabels(['Ham', 'Spam'])\n","    ax.set_yticklabels(['Ham', 'Spam'])\n","\n","# Main execution\n","def main():\n","    # Load and preprocess data\n","    texts, labels = load_data('spam_ham_dataset.csv')\n","    if not texts:\n","        return\n","\n","    word_to_idx = build_vocabulary(texts)\n","    X = text_to_features(texts, word_to_idx)\n","    X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_seed=42)\n","\n","    # K-Fold Cross-Validation\n","    k = 5\n","    folds = k_fold_split(X, labels, k)\n","    cv_results = {\n","        'Logistic Regression': {'accuracy': [], 'precision': [], 'recall': [], 'f1': []},\n","        'Decision Tree': {'accuracy': [], 'precision': [], 'recall': [], 'f1': []},\n","        'Random Forest': {'accuracy': [], 'precision': [], 'recall': [], 'f1': []},\n","        'SVM': {'accuracy': [], 'precision': [], 'recall': [], 'f1': []}\n","    }\n","\n","    # Train and evaluate models with cross-validation\n","    for fold_idx, (train_idx, test_idx) in enumerate(folds):\n","        X_train_fold, X_test_fold = X[train_idx], X[test_idx]\n","        y_train_fold, y_test_fold = labels[train_idx], labels[test_idx]\n","\n","        # Logistic Regression\n","        weights_lr, bias_lr = logistic_regression(X_train_fold, y_train_fold)\n","        y_pred_lr = predict_logistic(X_test_fold, weights_lr, bias_lr)\n","        acc_lr, prec_lr, rec_lr, f1_lr, _ = compute_metrics(y_test_fold, y_pred_lr)\n","        cv_results['Logistic Regression']['accuracy'].append(acc_lr)\n","        cv_results['Logistic Regression']['precision'].append(prec_lr)\n","        cv_results['Logistic Regression']['recall'].append(rec_lr)\n","        cv_results['Logistic Regression']['f1'].append(f1_lr)\n","\n","        # Decision Tree\n","        tree = build_tree(X_train_fold, y_train_fold)\n","        y_pred_tree = predict_tree(tree, X_test_fold)\n","        acc_tree, prec_tree, rec_tree, f1_tree, _ = compute_metrics(y_test_fold, y_pred_tree)\n","        cv_results['Decision Tree']['accuracy'].append(acc_tree)\n","        cv_results['Decision Tree']['precision'].append(prec_tree)\n","        cv_results['Decision Tree']['recall'].append(rec_tree)\n","        cv_results['Decision Tree']['f1'].append(f1_tree)\n","\n","        # Random Forest\n","        forest = random_forest(X_train_fold, y_train_fold, n_trees=5)\n","        y_pred_forest = predict_forest(forest, X_test_fold)\n","        acc_forest, prec_forest, rec_forest, f1_forest, _ = compute_metrics(y_test_fold, y_pred_forest)\n","        cv_results['Random Forest']['accuracy'].append(acc_forest)\n","        cv_results['Random Forest']['precision'].append(prec_forest)\n","        cv_results['Random Forest']['recall'].append(rec_forest)\n","        cv_results['Random Forest']['f1'].append(f1_forest)\n","\n","        # SVM\n","        weights_svm, bias_svm = svm_train(X_train_fold, y_train_fold)\n","        y_pred_svm = predict_svm(X_test_fold, weights_svm, bias_svm)\n","        acc_svm, prec_svm, rec_svm, f1_svm, _ = compute_metrics(y_test_fold, y_pred_svm)\n","        cv_results['SVM']['accuracy'].append(acc_svm)\n","        cv_results['SVM']['precision'].append(prec_svm)\n","        cv_results['SVM']['recall'].append(rec_svm)\n","        cv_results['SVM']['f1'].append(f1_svm)\n","\n","    # Print cross-validation results\n","    print(\"\\nCross-Validation Results (mean ± std):\")\n","    for model in cv_results:\n","        acc_mean = np.mean(cv_results[model]['accuracy'])\n","        acc_std = np.std(cv_results[model]['accuracy'])\n","        prec_mean = np.mean(cv_results[model]['precision'])\n","        prec_std = np.std(cv_results[model]['precision'])\n","        rec_mean = np.mean(cv_results[model]['recall'])\n","        rec_std = np.std(cv_results[model]['recall'])\n","        f1_mean = np.mean(cv_results[model]['f1'])\n","        f1_std = np.std(cv_results[model]['f1'])\n","        print(f\"{model}:\")\n","        print(f\"  Accuracy: {acc_mean:.4f} ± {acc_std:.4f}\")\n","        print(f\"  Precision: {prec_mean:.4f} ± {prec_std:.4f}\")\n","        print(f\"  Recall: {rec_mean:.4f} ± {rec_std:.4f}\")\n","        print(f\"  F1-Score: {f1_mean:.4f} ± {f1_std:.4f}\")\n","\n","    # Train on full training set and evaluate on test set for visualizations\n","    weights_lr, bias_lr = logistic_regression(X_train, y_train)\n","    y_pred_lr = predict_logistic(X_test, weights_lr, bias_lr)\n","    acc_lr, _, _, _, cm_lr = compute_metrics(y_test, y_pred_lr)\n","\n","    tree = build_tree(X_train, y_train)\n","    y_pred_tree = predict_tree(tree, X_test)\n","    acc_tree, _, _, _, cm_tree = compute_metrics(y_test, y_pred_tree)\n","\n","    forest = random_forest(X_train, y_train, n_trees=5)\n","    y_pred_forest = predict_forest(forest, X_test)\n","    acc_forest, _, _, _, cm_forest = compute_metrics(y_test, y_pred_forest)\n","\n","    weights_svm, bias_svm = svm_train(X_train, y_train)\n","    y_pred_svm = predict_svm(X_test, weights_svm, bias_svm)\n","    acc_svm, _, _, _, cm_svm = compute_metrics(y_test, y_pred_svm)\n","\n","    # Print confusion matrices as text\n","    print_confusion_matrix(cm_lr, \"Logistic Regression\")\n","    print_confusion_matrix(cm_tree, \"Decision Tree\")\n","    print_confusion_matrix(cm_forest, \"Random Forest\")\n","    print_confusion_matrix(cm_svm, \"SVM\")\n","\n","    # Plot accuracy chart\n","    accuracies = [acc_lr, acc_tree, acc_forest, acc_svm]\n","    plot_accuracy_chart(accuracies)\n","\n","    # Plot confusion matrices\n","    fig, axes = plt.subplots(2, 2, figsize=(10, 8))\n","    plot_confusion_matrix(cm_lr, \"Logistic Regression\", axes[0, 0])\n","    plot_confusion_matrix(cm_tree, \"Decision Tree\", axes[0, 1])\n","    plot_confusion_matrix(cm_forest, \"Random Forest\", axes[1, 0])\n","    plot_confusion_matrix(cm_svm, \"SVM\", axes[1, 1])\n","    plt.tight_layout()\n","    plt.show()\n","\n","if __name__ == \"__main__\":\n","    main()"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}